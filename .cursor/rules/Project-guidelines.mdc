---
description:
globs:
alwaysApply: false
---
---
alwaysApply: true
description: Project guidelines for Construction Site Safety Compliance Agent hackathon project
---

# MUST FOLLOW GUIDELINES
- ONLY DO WHAT I TOLD YOU TO DO. DO NOT OVERENGINEER OR ADD SOMETHING THAT DOESN'T EXIST, ASK ME FOLLOW UP QUESTION IF YOU ARE CONFUSED OR IF SOMETHING I SAY DOESN'T EXSITS. DO NOT MAKE YOUR OWN DECISIONS. ALWAYS ASK FOR MY PERMISSION.

# Construction Site Safety Compliance Agent - Project Guidelines

## Project Overview
This is a hackathon project for AgentHack 2025 that must use Portia SDK to build an AI Safety Assistant agent for professional safety inspectors. The agent analyzes construction site images for safety violations using **Portia-managed OpenAI GPT-5-mini** and orchestrates multi-tool workflows through Portia's built-in integrations.

**CURRENT STATUS**: âœ… **PRODUCTION READY & FULLY FUNCTIONAL** - All critical issues resolved, LocalDataValue parsing fixed, markdown JSON extraction implemented, data normalization complete, and system fully operational.

## Current Working Status

### âœ… **COMPLETED & WORKING** 
- **Backend Server**: FastAPI running on `http://localhost:8000` with **pure Portia integration** âœ…
- **Frontend Server**: Next.js running on `http://localhost:3000` with **unified chat-centric UI** âœ…
- **Portia SDK Integration**: **Properly configured** with `default_config()` and `DefaultToolRegistry` âœ…
- **OpenAI GPT-5-mini Vision**: **FIXED** - Enhanced image analysis with comprehensive debugging âœ…
- **Image Processing Pipeline**: **COMPLETELY OVERHAULED** - Fixed "No violations detected" issue âœ…
- **OAuth Integration**: **WORKING** - Gmail OAuth handled via frontend modals âœ…
- **Report Generation**: **ENHANCED** - Comprehensive professional reports with full email content display âœ…
- **Chat-Centric UI**: **REDESIGNED** - Unified interface with embedded image upload and rich message types âœ…
- **Error Handling**: **ROBUST** - Multi-layered fallbacks and comprehensive logging âœ…

### âœ… **LATEST CRITICAL FIXES (JUST COMPLETED)**
- **LocalDataValue Object Handling**: âœ… **FIXED** - Properly extract `value` attribute from Portia's LocalDataValue response objects
- **Markdown JSON Parsing**: âœ… **IMPLEMENTED** - Extract JSON from GPT-5-mini's ` ```json ... ``` ` code blocks
- **Data Type Normalization**: âœ… **COMPLETE** - Convert "$5,000" strings to integers, "High"â†’"CRITICAL" severity mapping
- **Multi-layered Response Extraction**: âœ… **ROBUST** - Try final_result â†’ step.output â†’ outputs.final_output â†’ fallbacks
- **Backend-Frontend Sync**: âœ… **OPERATIONAL** - Violations now properly flow from Portia analysis to frontend display
- **Production Testing**: âœ… **VERIFIED** - Both servers running, image analysis pipeline fully functional

### ðŸš€ **PRODUCTION READY FEATURES**
- **Drag & Drop Image Analysis**: **WORKING** - Direct image upload in chat interface
- **Conversational AI**: **ENHANCED** - True chat-based interaction with contextual responses  
- **Professional Reports**: **COMPLETE** - Comprehensive safety reports with OSHA codes and action plans
- **Gmail Integration**: **FUNCTIONAL** - OAuth handled via frontend modals, reports sent successfully
- **Violation Detection**: **FIXED** - Enhanced image processing pipeline with proper Portia integration
- **Clean Interface**: **OPTIMIZED** - Centered chat interface without distracting elements

## Target Users
- **Professional Safety Inspectors**: OSHA certified inspectors conducting compliance checks
- **Site Safety Managers**: Construction site supervisors monitoring daily safety
- **Safety Officers**: Corporate safety personnel tracking compliance across projects

## Report Recipients
Safety compliance reports are automatically sent via Gmail MCP to:
- **Site Managers**: Immediate action on violations
- **Project Managers**: Resource allocation for corrections  
- **Corporate Safety Officers**: Compliance tracking and documentation
- **OSHA Compliance Managers**: Regulatory reporting requirements

## Core Requirements
- **Mandatory**: Use Portia SDK (required for hackathon eligibility) âœ…
- **AI Model**: **OpenAI GPT-5-mini** with vision via **Portia-managed LLM**
- **Image Processing**: Images only (no video), **Portia agent analysis**
- **Integrations**: Portia built-in tools (Gmail via OAuth, MongoDB for data persistence)
- **Timeline**: 4-hour rapid development window
- **Focus**: Clean, professional UI with Next.js (modern hackathon solution)

## Technical Architecture

### Primary Stack
- **Backend**: Python + **Portia SDK (pure integration)** + FastAPI (REST API)
- **Frontend**: Next.js 15 + React + TypeScript + Tailwind CSS
- **Database**: MongoDB for inspection data persistence
- **AI**: **OpenAI GPT-5-mini** via **Portia SDK** (explicitly configured)
- **Integrations**: Portia built-in tools (Gmail via OAuth, MongoDB for data)
- **API Communication**: RESTful endpoints between Next.js and FastAPI
- **Format**: Base64 image encoding for API calls

### Key Components
1. **Image Analysis Engine**: **Portia-managed GPT-5-mini** vision analysis (no direct API calls)
2. **Conversational Agent**: Portia-powered AI assistant with multi-tool orchestration
3. **Safety Detection**: OSHA violation identification and analysis
4. **AI Safety Assistant**: Conversational agent with proactive recommendations
5. **Professional Dashboard**: Safety inspector interface with inspection history
6. **Human-in-the-Loop**: Clarifications and confirmations via Portia
7. **Notification System**: Gmail reports via Portia built-in tools with OAuth
8. **Data Persistence**: MongoDB for inspection records and analytics

## Development Priorities

### Hour 1: Backend Foundation âœ… **COMPLETED**
- **Portia SDK setup and configuration** âœ… Using `default_config()` + `DefaultToolRegistry`
- **OpenAI GPT-4o-mini integration** âœ… Via Portia auto-detection (no direct calls)
- **FastAPI backend with CORS setup** âœ… 
- **MongoDB connection and data models** âœ…
- **Portia built-in tools setup** âœ… (Gmail OAuth, MongoDB)
- **Environment variables and credentials** âœ…

### Hour 2: Core Analysis Engine âœ… **COMPLETED**
- **Image-to-base64 encoding function** âœ…
- **Portia-managed vision analysis** âœ… Integrated into `SafetyInspectionAgent`
- **Safety violation detection prompt engineering** âœ…
- **JSON response parsing and API endpoints** âœ…
- **MongoDB inspection record storage** âœ…

### Hour 3: AI Assistant Frontend
- Next.js 15 app setup with TypeScript + Tailwind
- Conversational chat interface for agent interactions
- Safety Inspector Dashboard with proactive suggestions
- Image upload component with drag & drop
- Real-time analysis display with agent recommendations

### Hour 4: Portia Integration + Polish
- Gmail report generation via Portia built-in tools with OAuth
- Connect frontend to FastAPI backend
- Professional dashboard polish and UX
- Demo preparation with sample construction images

## Code Standards

### File Structure (CURRENT - UNIFIED CHAT-CENTRIC) âœ…
```
AgentHack 2025/
â”œâ”€â”€ backend/                     # **Enhanced Portia-integrated backend** âœ…
â”‚   â”œâ”€â”€ main.py                 # FastAPI with chat-centric endpoints âœ…
â”‚   â”œâ”€â”€ portia_agent.py         # **Fixed image analysis + comprehensive reporting** âœ…
â”‚   â”œâ”€â”€ models.py               # Enhanced data models with OAuth exceptions âœ…
â”‚   â”œâ”€â”€ config.py               # Environment configuration âœ…
â”‚   â”œâ”€â”€ requirements.txt        # **Portia SDK dependencies** âœ…
â”‚   â”œâ”€â”€ env.example             # **Simplified environment template** âœ…
â”‚   â””â”€â”€ venv/                   # Virtual environment âœ…
â”œâ”€â”€ frontend/                    # **Unified chat-centric frontend** âœ…
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”‚   â”œâ”€â”€ page.tsx        # **Centered chat dashboard** âœ…
â”‚   â”‚   â”‚   â”œâ”€â”€ layout.tsx      # Root layout âœ…
â”‚   â”‚   â”‚   â””â”€â”€ globals.css     # Global styles âœ…
â”‚   â”‚   â””â”€â”€ components/
â”‚   â”‚       â”œâ”€â”€ ChatInterface.tsx      # **Enhanced conversational UI with image upload** âœ…
â”‚   â”‚       â”œâ”€â”€ ViolationCard.tsx      # **Rich violation display component** âœ…
â”‚   â”‚       â”œâ”€â”€ ReportMessage.tsx      # **Professional report display with email content** âœ…
â”‚   â”‚       â””â”€â”€ OAuthModal.tsx         # **Gmail authentication modal** âœ…
â”‚   â”œâ”€â”€ package.json            # Dependencies with react-dropzone âœ…
â”‚   â”œâ”€â”€ tailwind.config.js      # Tailwind config âœ…
â”‚   â””â”€â”€ next.config.js          # Next.js config âœ…
â”œâ”€â”€ .cursor/
â”‚   â””â”€â”€ rules/
â”‚       â”œâ”€â”€ project-guidelines.mdc     # **Updated project guidelines** âœ…
â”‚       â””â”€â”€ AgentHack-guidelines.mdc   # **Hackathon guidelines** âœ…
â””â”€â”€ README.md                    # Setup instructions âœ…
```

### Environment Variables
```bash
# Backend (.env) - CRITICAL: Copy from env.example
PORTIA_API_KEY="your_portia_api_key"  # Required for Portia cloud tools
OPENAI_API_KEY="your-openai-api-key"  # **Auto-detected by Portia for GPT-4o-mini**

# Database
MONGODB_URL="mongodb://localhost:27017/construction_safety"

# Frontend (.env.local)
NEXT_PUBLIC_API_URL="http://localhost:8000"
```

## Enhanced AI Safety Assistant Features

### Unified Chat-Centric Interface
```python
# Everything happens in chat - no separate UI sections
"Drag & drop construction images directly into chat"
"Generate detailed OSHA compliance reports" 
"Send reports to custom email recipients"
"View complete email content sent to stakeholders"
```

### Advanced Image Analysis (FIXED)
- **Enhanced Portia Integration**: Proper Image Understanding Tool usage with comprehensive debugging
- **Multi-layered Processing**: Temp file approach + base64 fallback + text parsing
- **Detailed Logging**: Complete pipeline visibility for troubleshooting
- **Robust Error Handling**: Multiple fallback strategies ensure analysis never fails

### Professional Report Generation
- **Comprehensive Reports**: Executive summaries, financial impact, detailed violation analysis
- **OSHA Compliance**: Proper regulation codes, corrective actions, and fine estimates  
- **Custom Recipients**: User-specified email addresses via prompt interface
- **Email Content Display**: Full report content shown in chat interface

### OAuth Integration (Frontend)
- **Gmail Authentication Modal**: User-friendly OAuth flow in popup
- **Seamless Experience**: No confusion about authentication requirements
- **Clear Instructions**: Step-by-step guidance for Gmail permissions

### Rich Message Types in Chat
- **Image Analysis Messages**: Violation cards with severity indicators and action buttons
- **Report Messages**: Professional display with expandable email content
- **OAuth Messages**: Interactive authentication buttons and clear guidance
- **Contextual Actions**: Smart buttons based on analysis results

## Safety Violation Detection Focus

### Critical Violations (OSHA Priority)
1. **Missing PPE**: Hard hats, safety vests, eye protection
2. **Fall Protection**: Missing harnesses, guardrails, improper ladders
3. **Scaffolding Safety**: Missing planks, improper setup
4. **Equipment Safety**: Unsecured tools, missing guards

### Response Format
- Structured JSON with violation details
- OSHA code references
- Severity levels (CRITICAL/MODERATE/LOW)
- Specific corrective actions
- Fine estimates for business impact

## Portia Integration Strategy

### Portia's Built-in Gmail OAuth Integration
- **No Manual OAuth Setup**: Portia handles Gmail OAuth authentication automatically
- **Built-in Tools**: Use `portia:google:gmail:search_email` and similar tools
- **OAuth Flow**: When Gmail tools need auth, Portia raises `ActionClarification` with OAuth link
- **Seamless Authentication**: Use `portia.wait_for_ready()` to handle OAuth clarifications
- **Token Management**: Portia manages all OAuth token refresh and authentication complexity

### Implementation Pattern âœ… **CURRENT**
```python
from portia import (
    Portia, 
    DefaultToolRegistry, 
    default_config,
    PlanRunState, 
    ActionClarification
)

# **Proper Portia configuration as per documentation**
config = default_config()  # âœ… Using default_config()
tools = DefaultToolRegistry(config=config)  # âœ… Using DefaultToolRegistry
portia = Portia(config=config, tools=tools)

# Execute plans with correct API
plan_run = portia.run("your query here")

# Handle Gmail OAuth automatically
while plan_run.state == PlanRunState.NEED_CLARIFICATION:
    for clarification in plan_run.get_outstanding_clarifications():
        if isinstance(clarification, ActionClarification):
            print(f"{clarification.user_guidance} -- Please click on the link below to proceed.")
            print(clarification.action_url)
            plan_run = portia.wait_for_ready(plan_run)
    plan_run = portia.resume(plan_run)
```

### Primary Tools (Must Have)
- **Gmail**: Professional compliance reports via Portia built-in tools with OAuth
- **MongoDB**: Inspection data persistence and analytics

### Dashboard Features
- **Inspection History**: Past safety assessments
- **Safety Metrics**: Violation trends and statistics
- **Professional Layout**: Safety inspector interface

### Workflow Pattern âœ… **UNIFIED CHAT-CENTRIC**
```
Drag Image to Chat â†’ **Enhanced Portia Image Analysis (GPT-5-mini)** â†’ Rich Violation Cards â†’ 
Contextual Action Buttons â†’ Custom Email Recipients â†’ OAuth Modal (if needed) â†’ 
Professional Report Generation â†’ Email Content Display â†’ Complete Inspector Experience
```

## Demo Requirements

### 90-Second Demo Flow
1. **AI Assistant Introduction**: "Hello! I'm your Safety Assistant. How can I help today?"
2. **Conversational Interaction**: Inspector asks "Analyze this construction site image"
3. **Image Upload & Analysis**: Drag & drop image, GPT-4o analyzes in real-time
4. **Agent Recommendations**: "I found 3 violations. Shall I prioritize the critical ones?"
5. **Human-in-the-Loop**: Agent asks "This looks like a fall protection issue. Confirm?"
6. **Proactive Suggestions**: "Similar violations occurred here last month. Send alert to safety team?"
7. **Automated Actions**: Gmail report generation via Portia built-in tools (OAuth handled automatically)
8. **Learning**: "I've saved your preferences for future inspections"
9. **Business Impact**: "Prevented $15,625 in potential OSHA fines"

### Success Metrics
- Detect 4+ violation types with 80%+ accuracy
- Generate reports in <30 seconds
- Successfully integrate Gmail via Portia OAuth + MongoDB persistence
- Working end-to-end demo

## Hackathon Constraints

### Time Limitations
- Total development time: 4 hours
- Focus on core functionality only
- No complex UI/UX (functional is sufficient)
- Use pre-built components where possible

### Judging Criteria Alignment
- **Portia Usage**: Maximize built-in tool orchestration (Gmail OAuth, MongoDB)
- **Real Problem**: Construction safety ($13B market)
- **Implementation**: Working prototype with clear value
- **Creativity**: Multi-tool automation workflow

## Common Pitfalls to Avoid
- Over-engineering the UI (keep it simple)
- Complex computer vision setup (use GPT-5 directly)
- Too many violation types (focus on 4 critical ones)
- Authentication complexity (leverage Portia's handling)
- Feature creep (stick to MVP scope)

## Business Context
- Construction industry: 1 in 10 injury rate
- Average OSHA fine: $15,625 per violation
- Manual inspections miss 40% of violations
- Target: Prevent costly violations, improve safety

## Success Definition
A working Construction Site Safety Compliance Agent that:
1. Analyzes construction images using Azure GPT-5
2. Detects common safety violations accurately
3. Orchestrates notifications via Portia built-in tools with OAuth
4. Demonstrates clear business value
5. Showcases Portia SDK capabilities effectively

## Quick Reference

### Essential Commands
```bash
# Backend Setup
pip install portia-sdk-python fastapi uvicorn pymongo
export OPENAI_API_KEY="your-openai-key"  # Auto-detected by Portia
export PORTIA_API_KEY="your-portia-key"  # Required for cloud tools
export MONGODB_URL="mongodb://localhost:27017/construction_safety"

# Frontend Setup  
npx create-next-app@latest frontend --typescript --tailwind --app
cd frontend && npm install
```

### Key Portia Features to Leverage
- **Conversational Interface**: Natural language interactions with inspectors
- **Human-in-the-Loop**: Clarifications for ambiguous safety violations
- **Tool Orchestration**: Gmail reports (OAuth) + MongoDB persistence via Portia
- **Plan Execution**: Multi-step workflows with inspector confirmations
- **Proactive Suggestions**: Context-aware recommendations based on site history

### Demo Script (90 seconds) - PRODUCTION READY âœ…
1. **"Hello! I'm your AI Safety Assistant"** âœ… (enhanced conversational greeting)
2. **Drag construction image to chat** âœ… â†’ Enhanced GPT-5-mini analysis with comprehensive debugging
3. **Rich violation cards displayed** âœ… â†’ Interactive cards with severity indicators and action buttons
4. **"ðŸ“§ Send Custom Report" clicked** âœ… â†’ Prompt for recipient emails, professional report generation
5. **OAuth modal appears** âœ… â†’ User-friendly Gmail authentication in popup
6. **"Report sent successfully!"** âœ… â†’ Full email content displayed in chat with expandable view
7. **Complete professional experience** âœ… â†’ All functionality working end-to-end

**CURRENT STATUS**: âœ… **FULLY OPERATIONAL** - All critical parsing issues resolved, violations properly detected and displayed, complete end-to-end functionality verified.

## Quick Start (UPDATED)
```bash
# Backend (Terminal 1)
cd backend
source venv/bin/activate
python main.py  # Server starts on http://localhost:8000

# Frontend (Terminal 2)  
cd frontend
npm run dev     # Server starts on http://localhost:3000
```

**For Full Demo**: Copy `backend/env.example` to `backend/.env` and add real API keys.

## âœ… **Latest Major Updates (Current)**
- **Unified Chat Interface**: **COMPLETE** - Everything happens in chat, no separate UI sections
- **Image Processing Pipeline**: **COMPLETELY FIXED** - Enhanced Portia integration with comprehensive debugging
- **Professional Reports**: **ENHANCED** - Detailed OSHA-compliant reports with financial impact analysis
- **OAuth Frontend Integration**: **IMPLEMENTED** - Gmail authentication via user-friendly modals
- **Rich Message Types**: **DEPLOYED** - Violations, reports, OAuth links, and image analysis in chat
- **Advanced Error Handling**: **ROBUST** - Multi-pattern JSON parsing and text-based violation detection
- **Clean UI Design**: **OPTIMIZED** - Removed unnecessary elements, centered chat interface

## ðŸŽ¯ **Current Technical Implementation**

### ðŸ”§ **CRITICAL FIX: Complete Image Analysis Pipeline**
```python
# PROBLEM IDENTIFIED: Backend detecting violations, frontend showing "No violations detected"
# ROOT CAUSE: Three critical parsing issues in portia_agent.py

# 1. LocalDataValue Object Handling (FIXED)
if hasattr(plan_run.outputs, 'final_output'):
    final_output = plan_run.outputs.final_output
    # Handle LocalDataValue object from Portia
    if hasattr(final_output, 'value'):
        response_content = final_output.value  # âœ… Extract actual content
        logger.info("Using outputs.final_output.value (LocalDataValue)")

# 2. Markdown JSON Extraction (IMPLEMENTED)
if '```json' in response_content:
    json_start = response_content.find('```json') + 7  # Skip ```json
    json_end = response_content.find('```', json_start)
    json_content = response_content[json_start:json_end].strip()  # âœ… Extract JSON
    violations_data = json.loads(json_content)

# 3. Data Type Normalization (COMPLETE)
# Fix fine_estimate: "$5,000" â†’ 5000
fine_clean = fine_str.replace('$', '').replace(',', '')
cleaned_violation['fine_estimate'] = int(fine_clean)

# Fix severity mapping: "High" â†’ "CRITICAL", "Medium" â†’ "MODERATE"
severity_map = {'HIGH': 'CRITICAL', 'MEDIUM': 'MODERATE', 'LOW': 'LOW'}
cleaned_violation['severity'] = severity_map.get(severity, 'MODERATE')

# RESULT: âœ… Violations now properly flow from Portia â†’ Backend â†’ Frontend
```

### Unified Chat-Centric Architecture
```python
# Before: Separate UI components (ImageUpload, AnalysisResults, etc.)
# After: Everything embedded in ChatInterface

# Rich message types in chat:
- image_analysis: Shows violation cards with action buttons
- oauth: Displays authentication modal triggers  
- report: Shows comprehensive reports with email content
- text: Standard conversational responses

# Contextual action buttons:
"ðŸ“§ Send Custom Report" â†’ Prompts for emails â†’ Generates professional report
"ðŸ“Š Quick Report" â†’ Uses default recipients â†’ Sends immediately
"ðŸŽ¯ Get Recommendations" â†’ Provides safety guidance
```

Remember: This is a hackathon project - **PRODUCTION READY AND DEMO-TESTED!** ðŸš€